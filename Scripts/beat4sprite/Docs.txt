
// DESCRIPTION //

beat4sprite is a **library** to draw different things in the SM5 engine
inspired on the classic DDR PSX backgrounds and sprite animations.

This is a personal project I began back in 2013, back when 
I used to play with cheap and simple BGAnimations or 
RandomMovies (Gameplay backgrounds) on StepMania 3.9. 
Mostly stuff from DDR or ITG. So around that time 
I started to create my custom videos to use while on gameplay.

Then my idea changed because of video encoding, quality and 
size mostly. I moved to scripting and writing code so I could draw 
my own BGAnimations. So while I was learning Lua through SM and other games
this project evolved.

I tried to do a lot of code maintenance and debugging too, 
checking my code and performance testing in-game.

If you're interested you might want to check:
https://github.com/EngineMachiner/beat4sprite-Collections


// HOW TO //

By creating a script, then a table with data / parameters 
and using this library's functions (e.g BGA_G.Load(parameters) ), 
you can draw on screen many effects that are synced with the beat.

// FUNCTIONS //

Copy() -> Tries to overlap two parameter sets. 
    Creating a new one. Overlaps or overwrittes directly.

ParTweaks() -> Doesn't create a new set. 
    It modifies it. Resets commands.

// PARAMETERS (KEYS) //

File -> (string)
Script -> (string)
Type -> (int) Defines custom variations of the script related to the script name.

Params -> (table) Defines the params to be sent to 
    the actor/s created with the Script parameter.
    ( Alternative to loadfile( params.Script )( params ) )

FileTweak -> Use a script as base to be tweaked by the following group of parameters in a set.
LoadOnce -> Keeps the file data to be passed as one arg to the script.

Zoom -> (float)
HurryTweenBy -> (float) Might hurry effects too

Cleanup -> Deletes all parameters except internals (bool)
SleepMove -> Used in the Move command, uses sleep() instead of linear() (bool)

FrmDelay -> Animation/Frame delay for the sprite (float)

Frames -> Indicate starting state and ending state [no skipping in between] (table) 
Spacing -> Tweaks spacing between sprites (table)

X_num/Y_num -> How many lines to draw of Sprites each parameter to their own axis (int or table)

    Examples: 
    Y_num = 3 -> will create ( 3 * 2 ) additional lines in the Y axis.
    X_num = 0 -> will create one line (because there's no additional lines just the original one)

    If you want to be more specific on the lines you can do X_num = { -1, 0 }
        -> This going to create 2 lines.

TCV -> Texture Cordinates Velocity (table)

    -> X_coord and Y_coord are two deprecated 
    parameters that lead to TCV (pls don't use them)

StopAtFrame -> Works with TCV and customizes the length to move (float)
Actors -> Additional Actors (table or Actor)

NoDelayTweaking -> (bool)
    -> It doesn't stabilize sprite delay on higher BPM
    -> Using it along queueing Load() hurts perfomance, to avoid that slow the queueing
        if there's high BPMs. See 1st005B.


(Not all the parameters might be here, please be aware and read the script in case of or ask :) )